## 포워딩 forwarding
- 마인크래프트, 스타듀밸리 => 멀티,사용자, 플레이어가 서버를 개설한다. 같이 게임할 플레이어가 내 컴퓨터 또는 서버 컴퓨터에 접속하게 된다.
- 포트 포워딩
	=> 공유기에서 설정한다. 어떠한 포트로 접근했을 때, 해당 포트에 대해서 문을 열어준다
	=> 엄밀히 얘기하면, 해당 포트로 요청이 들어왔을 때, 내 컴퓨터로 연결해준다.
	=> '중간에서 받아서 다른 곳으로 보내고, 그 쪽에서 응답할 수 있게 하는 것.'
## sendRedirect
- response에서 이거로 응답하면, 브라우저에서 해당 웹 페이지(라우터 포함)로 이동하고 기존의 기록을 없앤다.
	- 특징
		=> 브라우저의 요청 => WAS => redirect => 브라우저 => 브라우저의 재요청 => WAS 응답 => 브라우저
		=> 요청이 두 번 일어남// 연결 트래픽 자체가 돈이므로 비용 문제가 발생
## dispatch
	-dispatch를 이용해서, 서버 내에서 요청과 응답을 주고 받고, 완료된 내용으로 브라우저에 응답을 보내게 됨		
	-특징
		=> 브라우저의 요청 -> WAS => 작업 후 요청 => WAS => 응답 => 브라우저
		=> dispatch는 반드시 binding과 함께 쓰여야 함.
			=> why?? request setAttribute를 한다고 해도, 당장에 실행되는 response가 없다. 즉, 하위 response가 실행되고 메서드가 종료될 때, 이 request는 실행되지 않고 그대로 증발해버린다.
				이 떄문에 dispatch로 request와 response를 묶어서 보내주어, 내부적으로 한 번에 처리할 수 있도록 한다. 
## Binding
- 묶다.//
	데이터를 다른 데이터(클래스,객체, 요청 등등)에 연관되도록(포함되도록) 묶어주는 명령어이다.
## 쿠키
	-쿠키 수집 허용
	=> 사용자 정보를 저장한다 
	=> 보안이 없다시피 하다.
	=> 단순 스트링을 브라우저에서 저장한다.
##세션
	-서버에 데이터를 저장한다.
	-쿠키와 함께 사용한다.
##캐시
	- 용량이 큰 데이터(이미지,영상 등)를 임시 데이터로써 저장 후 해당 데이터의 요청이 필요할 때 가져다 사용
##로컬 스토리지
	- 브라우저에 포함된 DB
	- 웹 페이지 상에서는 소켓 통신을 통해서 데이터를 주고 받을 수 있지만, 웹 페이지 외부에서는 통신이 불가능하다.
